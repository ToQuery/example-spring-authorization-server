logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: trace
    org.springframework.boot.diagnostics: trace
#    org.springframework.security.oauth2: trace
#    org.springframework.boot.autoconfigure: DEBUG

server:
  shutdown: graceful
  port: 9000


management:

  endpoints:
    web:
      exposure:
        include: '*'

  endpoint:
    health:
      enabled: true
      probes:
        enabled: true
      show-details: always
    info:
      enabled: true

  health:
    livenessState: # 开启 /actuator/health/liveness
      enabled: true
    readinessState: # 开启 /actuator/health/readiness
      enabled: true

  metrics:
    enable:
      jvm: true
    use-global-registry: false

  observations:
    key-values:
      application: ${spring.application.name}

spring:
  docker:
    compose:
      enabled: false
  application:
    name: example-spring-authorization-server
#  profiles:
#    active: dev
  lifecycle:
    timeout-per-shutdown-phase: 30s
  jpa:
    show-sql: true
    generate-ddl: true

  sql:
    init:
      # mode: always
      schema-locations:
        - classpath*:org/springframework/security/oauth2/server/authorization/client/oauth2-registered-client-schema.sql
        - classpath*:org/springframework/security/oauth2/server/authorization/oauth2-authorization-consent-schema.sql
        - classpath*:org/springframework/security/oauth2/server/authorization/oauth2-authorization-schema.sql


  security:
    oauth2:
      authorizationserver:
        client:
          example:
            require-authorization-consent: true
            registration:
              client-id: example
              client-name: example
              client-secret: "{noop}example-secret"
              client-authentication-methods:
                - client_secret_basic
                - client_secret_post
                - client_secret_jwt
                - private_key_jwt
                - none
              authorization-grant-types:
                - authorization_code
                - refresh_token
                - client_credentials
                - password
                - urn:ietf:params:oauth:grant-type:jwt-bearer
                - urn:ietf:params:oauth:grant-type:device_code
              redirect-uris:
                - "http://127.0.0.1:8080/login/oauth2/code/oidc-client"
              post-logout-redirect-uris:
                - "http://127.0.0.1:8080/"
              scopes:
                - openid
                - profile
                - email
                - address
                - phone
                - read
                - write
            token:
              access-token-time-to-live: 1h
              refresh-token-time-to-live: 1h

      client:
        registration:
          google:
            provider: google
            client-name: Sign in with Google
            client-id: ${OAUTH_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH_GOOGLE_CLIENT_SECRET}
            scope:
              - openid
          github:
            provider: github
            client-name: Sign in with GitHub
            client-id: ${OAUTH_GITHUB_CLIENT_ID}
            client-secret: ${OAUTH_GITHUB_CLIENT_SECRET}
            scope:
              - user:email
              - read:user
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          github:
            user-name-attribute: login
